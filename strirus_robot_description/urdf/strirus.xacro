<?xml version="1.0"?>
<robot name="Strirus" xmlns:xacro="http://www.ros.org/wiki/xacro">

	<!-- Import all Gazebo-customization elements, including Gazebo colors -->
	<xacro:include filename="$(find strirus_robot_description)/urdf/strirus.gazebo" />
	<!-- Import Rviz colors -->
	<xacro:include filename="$(find strirus_robot_description)/urdf/materials.xacro" />


	<xacro:property name="deg2rad" value="${pi / 180}" />
	<!-- Constants for simulating -->
	<!-- number of legs need to be real number - 1 (it is from one side only)-->
	<!-- Xacro arg provides xacro.py file.xacro real_number_of_legs:=3 -->
	<xacro:arg name="real_number_of_legs" default="19" />
	<xacro:arg name="angle_between_legs" default="60" />
	<!-- in degree -->
	<xacro:arg name="offset_between_legs_wave" default="0" />
	<!-- scale is needed for easily change scale of stl -->
	<xacro:property name="scale" value="5" />

	<xacro:property name="real_number_of_legs" value="$(arg real_number_of_legs)" />
	<xacro:property name="number_of_legs" value="${real_number_of_legs - 1}" />
	<xacro:property name="angle_between_legs" value="$(arg angle_between_legs)" />
	<!-- in degree -->
	<xacro:property name="offset_between_legs_wave" value="$(arg offset_between_legs_wave)" />


	<!-- Body and leg Constants -->
	<xacro:property name="body_x_offset" value="${0 * scale}" />
	<xacro:property name="body_y_offset" value="${body_length / 2}" />
	<xacro:property name="body_z_offset" value="${leg_width + leg_height}" />
	<xacro:property name="first_hole_x_offset" value="${0.05 * scale}" />	

	<xacro:property name="body_width" value="${0.5 * scale}" />
	<xacro:property name="body_height" value="${0.07 * scale}" />
	<xacro:property name="body_weight" value="${body_width * body_length * body_height * 0.3}"/>	

	<xacro:property name="leg_x_offset" value="${0 * scale}" />
	<xacro:property name="leg_y_offset" value="${0 * scale}" />
	<xacro:property name="leg_z_offset" value="${0 * scale}" />

	<xacro:property name="leg_x_offset_in_body" value="${-0.075 * scale}" />
	<xacro:property name="leg_width" value="${0.02 * scale}" />
	<xacro:property name="leg_height" value="${0.08 * scale}" />
	<xacro:property name="fallibility_between_legs" value="${(0.002 * scale) + 2 * leg_width}" />

	<!-- Formulas -->
	<xacro:property name="dist_between_legs" value="${leg_height * sin(angle_between_legs * deg2rad) + fallibility_between_legs}" />
	<xacro:property name="body_length" value="${2 * first_hole_x_offset + (real_number_of_legs -1) * dist_between_legs}" />


	<!-- Leg description -->
	<xacro:macro name="leg" params="prefix num side">
		<link name="leg_${prefix}_${num}">
			<inertial>
				<mass value="${0.05 * scale}"/>
				<origin rpy="0  0  0" xyz="${leg_x_offset} ${leg_y_offset} ${leg_z_offset}"/>
				<inertia ixx="0.001" ixy="0" ixz="0" iyy="0.001" iyz="0" izz="0.001"/>
			</inertial>
			<collision >
				<!-- legs wave offset change only on the left side -->
				<xacro:if value="${prefix == 'left'}">
					<origin rpy="${(offset_between_legs_wave + angle_between_legs * num) % 360 * deg2rad} 0 0" xyz="${leg_x_offset} ${leg_y_offset} ${leg_z_offset}"/>
				</xacro:if>
				<xacro:if value="${prefix == 'right'}">
					<origin rpy="${-(angle_between_legs * num) % 360 * deg2rad} 0 ${pi}" xyz="${leg_x_offset} ${leg_y_offset} ${leg_z_offset}"/>
				</xacro:if>
				<geometry>
					<mesh filename="package://strirus_robot_description/meshes/stl/leg_30_degree_normal.stl" scale="1.0 1.0 1.0"/>
				</geometry>
			</collision>
			<visual>
				<xacro:if value="${prefix == 'left'}">
					<origin rpy="${(offset_between_legs_wave + angle_between_legs * num) % 360 * deg2rad} 0 0" xyz="${leg_x_offset} ${leg_y_offset} ${leg_z_offset}"/>
				</xacro:if>
				<xacro:if value="${prefix == 'right'}">
					<origin rpy="${-(angle_between_legs * num) % 360 * deg2rad} 0 ${pi}" xyz="${leg_x_offset} ${leg_y_offset} ${leg_z_offset}"/>
				</xacro:if>
				<geometry>
					<mesh filename="package://strirus_robot_description/meshes/stl/leg_30_degree_normal.stl" scale="1.0 1.0 1.0"/>
				</geometry>
				<material name="blue"/>
			</visual>
		</link>
		<!-- /////////////// -->
		<joint name="leg_${prefix}_${num}_revolute_joint" type="revolute">
			<parent link="body"/>
			<child link="leg_${prefix}_${num}"/>
			<origin rpy="0       0      0" xyz="${(body_width / 4 + leg_x_offset_in_body) * side} ${first_hole_x_offset + (num) * dist_between_legs}  ${body_z_offset}"/>
			<axis xyz="1 0  0"/>
			<limit effort="30" lower="-1e+100" upper="1e+100" velocity="3"/>
			<joint_properties damping="0.0" friction="0.0" />

		</joint>

		<!-- /////////////// -->
		<transmission name="leg_${prefix}_${num}_transmission">
			<type>transmission_interface/SimpleTransmission</type>
			<joint name="leg_${prefix}_${num}_revolute_joint">
				<hardwareInterface>VelocityJointInterface</hardwareInterface>
			</joint>
			<actuator name="leg_${prefix}_${num}_actuator">
				<hardwareInterface>VelocityJointInterface</hardwareInterface>
				<mechanicalReduction>1</mechanicalReduction>
			</actuator>
		</transmission>

	</xacro:macro>

	<!-- Body description -->
	<link name="base_link"/>
	<joint name="base_link_body_fixed" type="fixed">
		<parent link="base_link"/>
		<child link="body"/>
	</joint>
	<!-- /////////////// -->
	<link name="body">
		<inertial>
			<!-- 250 value is mass density, the value is just empiric-->
			<mass value="${body_weight}"/>
			<origin rpy="0  0  0" xyz="${body_x_offset} ${body_y_offset}  ${body_z_offset}"/>
			<inertia 
				ixx="${1/12 * body_weight * (body_height * body_height + body_length * body_length)}"  ixy="0"  ixz="0" 
				iyy="${1/12 * body_weight * (body_height * body_height + body_width * body_width)}" iyz="0" 
				izz="${1/12 * body_weight * (body_length * body_length + body_width * body_width)}" />
			</inertial>
			<collision >
				<origin rpy="0  0  0" xyz="${body_x_offset} ${body_y_offset}  ${body_z_offset}"/>
				<geometry>
					<box size="${body_width / 2} ${body_length} ${body_height / 2}"/>
				</geometry>
			</collision>
			<visual >
				<origin rpy="0  0  0" xyz="${body_x_offset} ${body_y_offset}  ${body_z_offset}"/>
				<geometry>
					<box size="${body_width / 2} ${body_length} ${body_height / 2}"/>
				</geometry>
				<material name="green"/>
			</visual>
		</link>

		<!-- create needed number of legs (is implemented by recurcion) -->
		<xacro:macro name="create_legs" params="prefix side number">
			<xacro:leg prefix="${prefix}" num="${number}" side="${side}"/>
			<xacro:if value="${number}">
				<xacro:create_legs number="${number-1}" prefix="${prefix}" side="${side}"/>
			</xacro:if>
		</xacro:macro>


		<xacro:create_legs prefix="left" side="1" number="${number_of_legs}" />
		<xacro:create_legs prefix="right" side="-1" number="${number_of_legs}" />

	</robot>